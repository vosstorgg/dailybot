import os
import logging
from aiohttp import web, ClientSession
import aiohttp_cors
from astro_service import get_daily_astro_summary, test_weather_api_connection, clear_cache
from user_registration import RegistrationStep
from database import initialize_database, db_manager
from db_registration_adapter import db_registration_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ –ë–î)
users_storage = {}

async def send_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {'chat_id': chat_id, 'text': text}
    
    async with ClientSession() as session:
        async with session.post(url, json=data) as response:
            return await response.json()

async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return web.json_response({
        'status': 'ok', 
        'message': 'DailyBot is running!',
        'version': '1.2.0',
        'features': ['telegram_bot', 'astrology', 'moon_phases', 'user_registration', 'postgresql_db'],
        'configuration': {
            'BOT_TOKEN': '‚úì' if BOT_TOKEN else '‚úó',
            'WEBHOOK_URL': '‚úì' if WEBHOOK_URL else '‚úó',
            'WEATHER_API_KEY': '‚úì' if WEATHER_API_KEY else '‚úó',
            'DATABASE_URL': '‚úì' if os.getenv('DATABASE_URL') else '‚úó'
        },
        'endpoints': {
            'GET /': 'Health check',
            'GET /webhook/status': 'Check webhook status',
            'POST /webhook/set': 'Configure webhook',
            'POST /webhook': 'Telegram webhook endpoint',
            'GET /astro/today': 'Get today\'s astrology summary',
            'GET /astro/test': 'Test WeatherAPI connection',
            'POST /astro/cache/clear': 'Clear astro cache (dev)'
        }
    })

async def webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        update = await request.json()
        logger.info(f"Received update from user: {update.get('message', {}).get('from', {}).get('id', 'unknown')}")
        
        if 'message' in update:
            message = update['message']
            chat_id = message['chat']['id']
            user_id = message.get('from', {}).get('id')
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            if 'location' in message:
                await handle_location(chat_id, user_id, message['location'])
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            elif 'text' in message:
                user_text = message['text'].lower().strip()
                if user_text.startswith('/'):
                    await handle_command(chat_id, user_id, user_text)
                else:
                    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                    await handle_text_message(chat_id, user_id, user_text)
            else:
                # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                await send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
            
        return web.json_response({'status': 'ok'})
    
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        return web.json_response({'error': str(e)}, status=500)

async def handle_location(chat_id, user_id, location_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        current_step = db_registration_manager.get_registration_step(user_id)
        
        if current_step == RegistrationStep.CURRENT_LOCATION:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            result = await db_registration_manager.process_registration_step(
                user_id, "", location_data  # –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ–¥–∞–µ–º location_data
            )
            
            if result.get('success'):
                await send_message(chat_id, result['message'])
            else:
                await send_message(chat_id, f"‚ùå {result.get('error', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏')}")
        else:
            # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –≤–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            lat, lon = location_data['latitude'], location_data['longitude']
            await send_message(chat_id, f"""üìç –ü–æ–ª—É—á–∏–ª –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!

–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.4f}, {lon:.4f}

–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.""")
            
    except Exception as e:
        logger.error(f"Error handling location: {e}")
        await send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.")

async def handle_command(chat_id, user_id, command):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    if command == '/start':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if db_registration_manager.is_registration_complete(user_id):
            user = await db_registration_manager.get_user(user_id)
            name = user.personal.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') if user else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            response = f"""üåü –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!

–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã:
/astro - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/moon - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –õ—É–Ω–µ
/profile - –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
/help - –°–ø—Ä–∞–≤–∫–∞

–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /astro ‚ú®"""
        else:
            # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            user_telegram_data = {
                'user_id': user_id,
                'first_name': 'User',  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ update
                'username': None
            }
            response = await db_registration_manager.start_registration(user_id, user_telegram_data)
        
    elif command == '/astro':
        try:
            summary = await get_daily_astro_summary()
            if summary.get('status') == 'error':
                response = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            else:
                moon = summary['moon']
                response = f"""üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞ –Ω–∞ {summary['date']}

{moon['description']}

‚ú® –û–±—â–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞:
{summary['general_energy']}

üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –¥–µ–Ω—å:
""" + '\n'.join(summary['recommendations'])
        except Exception as e:
            logger.error(f"Error getting astro summary for user: {e}")
            response = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."
    
    elif command == '/moon':
        try:
            summary = await get_daily_astro_summary()
            if summary.get('status') == 'error':
                response = "‚ùå –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –õ—É–Ω–µ."
            else:
                moon = summary['moon']
                response = f"""üåô –õ—É–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

{moon['description']}

–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å: {moon['illumination']}%
–î–∞—Ç–∞: {summary['date']}"""
        except Exception as e:
            response = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    
    elif command == '/profile':
        if not db_registration_manager.is_registration_complete(user_id):
            response = """üìã –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤."""
        else:
            user = await db_registration_manager.get_user(user_id)
            if user:
                response = f"""üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

{db_registration_manager._generate_registration_summary(user)}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start (–ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)."""
            else:
                response = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
    
    elif command == '/help':
        if db_registration_manager.is_registration_complete(user_id):
            response = """üìñ –ü–æ–º–æ—â—å –ø–æ DailyBot

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–ª–∏ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
/astro - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/moon - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ –õ—É–Ω—ã
/profile - –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîÆ DailyBot —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –∏ —Ç–µ–∫—É—â–∏—Ö –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤."""
        else:
            response = """üìñ –ü–æ–º–æ—â—å –ø–æ DailyBot

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start - —ç—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑—ã
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª—É–Ω–Ω—ã—Ö —Ñ–∞–∑–∞—Ö
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤

üîÆ –í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∞—à–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ."""
    
    else:
        response = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    
    await send_message(chat_id, response)

async def handle_text_message(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not text:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    current_step = db_registration_manager.get_registration_step(user_id)
    
    if current_step != RegistrationStep.NOT_STARTED and current_step != RegistrationStep.COMPLETED:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        result = await db_registration_manager.process_registration_step(user_id, text)
        
        if result.get('error'):
            if result.get('restart'):
                # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
                user_telegram_data = {'user_id': user_id, 'first_name': 'User'}
                response = await db_registration_manager.start_registration(user_id, user_telegram_data)
            else:
                response = f"‚ùå {result['error']}"
        elif result.get('success'):
            response = result['message']
            
            # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
            if result.get('completed'):
                await send_message(chat_id, response)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑
                try:
                    summary = await get_daily_astro_summary()
                    if summary.get('status') != 'error':
                        moon = summary['moon']
                        astro_response = f"""üîÆ –í–∞—à –ø–µ—Ä–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑!

{moon['description']}

‚ú® –û–±—â–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞:
{summary['general_energy']}

üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –¥–µ–Ω—å:
""" + '\n'.join(summary['recommendations'])
                        await send_message(chat_id, astro_response)
                    return
                except Exception as e:
                    logger.error(f"Error sending first forecast: {e}")
                return
        else:
            response = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö."
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if db_registration_manager.is_registration_complete(user_id):
            response = f"""üí¨ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{text}"

üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/astro - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
/moon - –§–∞–∑–∞ –õ—É–Ω—ã  
/profile - –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
/help - –°–ø—Ä–∞–≤–∫–∞"""
        else:
            response = f"""üí¨ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{text}"

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

üí° –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:
/moon - –§–∞–∑–∞ –õ—É–Ω—ã
/help - –°–ø—Ä–∞–≤–∫–∞"""
    
    await send_message(chat_id, response)

async def set_webhook(request):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ POST)"""
    if not BOT_TOKEN or not WEBHOOK_URL:
        return web.json_response({
            'error': 'Configuration missing',
            'details': {
                'BOT_TOKEN': 'Set' if BOT_TOKEN else 'Missing',
                'WEBHOOK_URL': 'Set' if WEBHOOK_URL else 'Missing'
            }
        }, status=400)
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
    data = {'url': f"{WEBHOOK_URL}/webhook"}
    
    async with ClientSession() as session:
        async with session.post(url, json=data) as response:
            result = await response.json()
    
    if result.get('ok'):
        return web.json_response({
            'status': 'success', 
            'message': 'Webhook configured successfully',
            'webhook_url': f"{WEBHOOK_URL}/webhook"
        })
    else:
        return web.json_response({
            'status': 'error', 
            'message': result.get('description', 'Unknown error'),
            'telegram_response': result
        }, status=400)

async def webhook_status(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π GET)"""
    if not BOT_TOKEN:
        return web.json_response({'error': 'BOT_TOKEN not configured'}, status=400)
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
    
    async with ClientSession() as session:
        async with session.get(url) as response:
            result = await response.json()
    
    if result.get('ok'):
        webhook_info = result['result']
        return web.json_response({
            'status': 'success',
            'webhook_configured': bool(webhook_info.get('url')),
            'webhook_url': webhook_info.get('url', ''),
            'has_custom_certificate': webhook_info.get('has_custom_certificate', False),
            'pending_update_count': webhook_info.get('pending_update_count', 0),
            'last_error_date': webhook_info.get('last_error_date'),
            'last_error_message': webhook_info.get('last_error_message')
        })
    else:
        return web.json_response({
            'error': 'Failed to get webhook info',
            'telegram_response': result
        }, status=400)

async def get_astro_today(request):
    """–ü–æ–ª—É—á–∏—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        summary = await get_daily_astro_summary()
        return web.json_response(summary)
    except Exception as e:
        logger.error(f"Error getting astro summary: {e}")
        return web.json_response({
            'error': 'Unable to fetch astrology data',
            'details': str(e)
        }, status=500)

async def test_astro_api(request):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WeatherAPI"""
    result = await test_weather_api_connection()
    status_code = 200 if result['status'] == 'success' else 500
    return web.json_response(result, status=status_code)

async def clear_astro_cache(request):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    try:
        clear_cache()
        return web.json_response({
            'status': 'success',
            'message': 'Astro cache cleared'
        })
    except Exception as e:
        return web.json_response({
            'status': 'error',
            'message': str(e)
        }, status=500)

def create_app():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    logger.info("Initializing DailyBot application...")
    logger.info(f"Configuration: BOT_TOKEN={'‚úì' if BOT_TOKEN else '‚úó'}, WEBHOOK_URL={'‚úì' if WEBHOOK_URL else '‚úó'}")
    
    app = web.Application()
    
    # CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    cors = aiohttp_cors.setup(app, defaults={
        "*": aiohttp_cors.ResourceOptions(
            allow_credentials=True,
            expose_headers="*",
            allow_headers="*",
            allow_methods="*"
        )
    })
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_get('/', health_check)
    app.router.add_post('/webhook', webhook)
    app.router.add_get('/webhook/status', webhook_status)
    app.router.add_post('/webhook/set', set_webhook)
    
    # –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    app.router.add_get('/astro/today', get_astro_today)
    app.router.add_get('/astro/test', test_astro_api)
    app.router.add_post('/astro/cache/clear', clear_astro_cache)
    
    # –î–æ–±–∞–≤–ª—è–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    for route in list(app.router.routes()):
        cors.add(route)
    
    logger.info("Application initialized successfully!")
    return app

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
application = create_app()

if __name__ == '__main__':
    # –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫
    port = int(os.environ.get('PORT', 8080))
    host = os.environ.get('HOST', '0.0.0.0')
    logger.info(f"Starting DailyBot server on {host}:{port}")
    web.run_app(application, host=host, port=port)