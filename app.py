import os
import logging
from aiohttp import web, ClientSession
import aiohttp_cors
from astro_service import get_daily_astro_summary, test_weather_api_connection, clear_cache

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ –ë–î)
users_storage = {}

async def send_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {'chat_id': chat_id, 'text': text}
    
    async with ClientSession() as session:
        async with session.post(url, json=data) as response:
            return await response.json()

async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return web.json_response({
        'status': 'ok', 
        'message': 'DailyBot is running!',
        'version': '1.1.0',
        'features': ['telegram_bot', 'astrology', 'moon_phases'],
        'configuration': {
            'BOT_TOKEN': '‚úì' if BOT_TOKEN else '‚úó',
            'WEBHOOK_URL': '‚úì' if WEBHOOK_URL else '‚úó',
            'WEATHER_API_KEY': '‚úì' if WEATHER_API_KEY else '‚úó'
        },
        'endpoints': {
            'GET /': 'Health check',
            'GET /webhook/status': 'Check webhook status',
            'POST /webhook/set': 'Configure webhook',
            'POST /webhook': 'Telegram webhook endpoint',
            'GET /astro/today': 'Get today\'s astrology summary',
            'GET /astro/test': 'Test WeatherAPI connection',
            'POST /astro/cache/clear': 'Clear astro cache (dev)'
        }
    })

async def webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        update = await request.json()
        logger.info(f"Received update from user: {update.get('message', {}).get('from', {}).get('id', 'unknown')}")
        
        if 'message' in update:
            message = update['message']
            chat_id = message['chat']['id']
            user_text = message.get('text', '').lower().strip()
            user_id = message.get('from', {}).get('id')
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if user_text.startswith('/'):
                await handle_command(chat_id, user_id, user_text)
            else:
                # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                await handle_text_message(chat_id, user_id, user_text)
            
        return web.json_response({'status': 'ok'})
    
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        return web.json_response({'error': str(e)}, status=500)

async def handle_command(chat_id, user_id, command):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    if command == '/start':
        response = """üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DailyBot!
        
–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.

–ö–æ–º–∞–Ω–¥—ã:
/astro - –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/moon - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –õ—É–Ω–µ
/help - –ü–æ–º–æ—â—å

–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤! ‚ú®"""
        
    elif command == '/astro':
        try:
            summary = await get_daily_astro_summary()
            if summary.get('status') == 'error':
                response = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            else:
                moon = summary['moon']
                response = f"""üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞ –Ω–∞ {summary['date']}

{moon['description']}

‚ú® –û–±—â–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞:
{summary['general_energy']}

üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –¥–µ–Ω—å:
""" + '\n'.join(summary['recommendations'])
        except Exception as e:
            logger.error(f"Error getting astro summary for user: {e}")
            response = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."
    
    elif command == '/moon':
        try:
            summary = await get_daily_astro_summary()
            if summary.get('status') == 'error':
                response = "‚ùå –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –õ—É–Ω–µ."
            else:
                moon = summary['moon']
                response = f"""üåô –õ—É–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

{moon['description']}

–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å: {moon['illumination']}%
–î–∞—Ç–∞: {summary['date']}"""
        except Exception as e:
            response = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    
    elif command == '/help':
        response = """üìñ –ü–æ–º–æ—â—å –ø–æ DailyBot

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/astro - –ü–æ–ª—É—á–∏—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É
/moon - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ –õ—É–Ω—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîÆ DailyBot –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ø–ª–∞–Ω–µ—Ç –∏ –õ—É–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.

–°–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è  
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    
    else:
        response = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    
    await send_message(chat_id, response)

async def handle_text_message(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not text:
        return
    
    # –ü—Ä–æ—Å—Ç–æ–µ —ç—Ö–æ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    response = f"""–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: "{text}"

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/astro - –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑
/moon - –§–∞–∑–∞ –õ—É–Ω—ã
/help - –°–ø—Ä–∞–≤–∫–∞"""
    
    await send_message(chat_id, response)

async def set_webhook(request):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ POST)"""
    if not BOT_TOKEN or not WEBHOOK_URL:
        return web.json_response({
            'error': 'Configuration missing',
            'details': {
                'BOT_TOKEN': 'Set' if BOT_TOKEN else 'Missing',
                'WEBHOOK_URL': 'Set' if WEBHOOK_URL else 'Missing'
            }
        }, status=400)
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
    data = {'url': f"{WEBHOOK_URL}/webhook"}
    
    async with ClientSession() as session:
        async with session.post(url, json=data) as response:
            result = await response.json()
    
    if result.get('ok'):
        return web.json_response({
            'status': 'success', 
            'message': 'Webhook configured successfully',
            'webhook_url': f"{WEBHOOK_URL}/webhook"
        })
    else:
        return web.json_response({
            'status': 'error', 
            'message': result.get('description', 'Unknown error'),
            'telegram_response': result
        }, status=400)

async def webhook_status(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π GET)"""
    if not BOT_TOKEN:
        return web.json_response({'error': 'BOT_TOKEN not configured'}, status=400)
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
    
    async with ClientSession() as session:
        async with session.get(url) as response:
            result = await response.json()
    
    if result.get('ok'):
        webhook_info = result['result']
        return web.json_response({
            'status': 'success',
            'webhook_configured': bool(webhook_info.get('url')),
            'webhook_url': webhook_info.get('url', ''),
            'has_custom_certificate': webhook_info.get('has_custom_certificate', False),
            'pending_update_count': webhook_info.get('pending_update_count', 0),
            'last_error_date': webhook_info.get('last_error_date'),
            'last_error_message': webhook_info.get('last_error_message')
        })
    else:
        return web.json_response({
            'error': 'Failed to get webhook info',
            'telegram_response': result
        }, status=400)

async def get_astro_today(request):
    """–ü–æ–ª—É—á–∏—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        summary = await get_daily_astro_summary()
        return web.json_response(summary)
    except Exception as e:
        logger.error(f"Error getting astro summary: {e}")
        return web.json_response({
            'error': 'Unable to fetch astrology data',
            'details': str(e)
        }, status=500)

async def test_astro_api(request):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WeatherAPI"""
    result = await test_weather_api_connection()
    status_code = 200 if result['status'] == 'success' else 500
    return web.json_response(result, status=status_code)

async def clear_astro_cache(request):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    try:
        clear_cache()
        return web.json_response({
            'status': 'success',
            'message': 'Astro cache cleared'
        })
    except Exception as e:
        return web.json_response({
            'status': 'error',
            'message': str(e)
        }, status=500)

def create_app():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    logger.info("Initializing DailyBot application...")
    logger.info(f"Configuration: BOT_TOKEN={'‚úì' if BOT_TOKEN else '‚úó'}, WEBHOOK_URL={'‚úì' if WEBHOOK_URL else '‚úó'}")
    
    app = web.Application()
    
    # CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    cors = aiohttp_cors.setup(app, defaults={
        "*": aiohttp_cors.ResourceOptions(
            allow_credentials=True,
            expose_headers="*",
            allow_headers="*",
            allow_methods="*"
        )
    })
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_get('/', health_check)
    app.router.add_post('/webhook', webhook)
    app.router.add_get('/webhook/status', webhook_status)
    app.router.add_post('/webhook/set', set_webhook)
    
    # –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    app.router.add_get('/astro/today', get_astro_today)
    app.router.add_get('/astro/test', test_astro_api)
    app.router.add_post('/astro/cache/clear', clear_astro_cache)
    
    # –î–æ–±–∞–≤–ª—è–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    for route in list(app.router.routes()):
        cors.add(route)
    
    logger.info("Application initialized successfully!")
    return app

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
application = create_app()

if __name__ == '__main__':
    # –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫
    port = int(os.environ.get('PORT', 8080))
    host = os.environ.get('HOST', '0.0.0.0')
    logger.info(f"Starting DailyBot server on {host}:{port}")
    web.run_app(application, host=host, port=port)