"""
–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å PostgreSQL
"""
import logging
from typing import Dict, Optional, Any
from datetime import datetime
from user_registration import RegistrationStep, UserData
from database import (
    get_user_by_telegram_id, create_or_update_user, 
    log_user_activity, User
)

logger = logging.getLogger(__name__)

class DatabaseRegistrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PostgreSQL"""
    
    def __init__(self):
        # –ö—ç—à –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (in-memory –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
        self.registration_states: Dict[int, RegistrationStep] = {}
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–µ—Å—Å–∏–∏
        self.user_cache: Dict[int, UserData] = {}
    
    async def get_user(self, telegram_user_id: int) -> Optional[UserData]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if telegram_user_id in self.user_cache:
                return self.user_cache[telegram_user_id]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_user = await get_user_by_telegram_id(telegram_user_id)
            if db_user:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UserData –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                user_data = UserData(telegram_user_id)
                user_dict = db_user.to_dict()
                
                user_data.personal = user_dict['personal']
                user_data.current = user_dict['current']
                user_data.preferences = user_dict['preferences']
                user_data.metadata = user_dict['metadata']
                
                # –ö—ç—à–∏—Ä—É–µ–º
                self.user_cache[telegram_user_id] = user_data
                return user_data
            
            return None
            
        except Exception as e:
            logger.error(f"Error getting user {telegram_user_id}: {e}")
            return None
    
    async def get_or_create_user(self, telegram_user_id: int) -> UserData:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = await self.get_user(telegram_user_id)
        if not user:
            user = UserData(telegram_user_id)
            self.user_cache[telegram_user_id] = user
            self.registration_states[telegram_user_id] = RegistrationStep.NOT_STARTED
        return user
    
    def get_registration_step(self, telegram_user_id: int) -> RegistrationStep:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º in-memory –∫—ç—à
        if telegram_user_id in self.registration_states:
            return self.registration_states[telegram_user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if telegram_user_id in self.user_cache:
            user = self.user_cache[telegram_user_id]
            step_str = user.metadata.get('registration_step', 'not_started')
            try:
                step = RegistrationStep(step_str)
                self.registration_states[telegram_user_id] = step
                return step
            except ValueError:
                pass
        
        return RegistrationStep.NOT_STARTED
    
    def set_registration_step(self, telegram_user_id: int, step: RegistrationStep):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.registration_states[telegram_user_id] = step
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if telegram_user_id in self.user_cache:
            self.user_cache[telegram_user_id].metadata['registration_step'] = step.value
    
    def is_registration_complete(self, telegram_user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
        return self.get_registration_step(telegram_user_id) == RegistrationStep.COMPLETED
    
    async def start_registration(self, telegram_user_id: int, user_telegram_data: Dict[str, Any]) -> str:
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            user = await self.get_or_create_user(telegram_user_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
            user.metadata.update({
                'telegram_username': user_telegram_data.get('username'),
                'telegram_first_name': user_telegram_data.get('first_name'),
                'telegram_last_name': user_telegram_data.get('last_name')
            })
            
            self.set_registration_step(telegram_user_id, RegistrationStep.NAME)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await log_user_activity(
                telegram_user_id, 
                'registration_start',
                {'telegram_data': user_telegram_data}
            )
            
            return """üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DailyBot!

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –≤–∞—Å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

üìù –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã –∏ –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ –í–∞—à–µ –∏–º—è
‚Ä¢ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –í—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤

–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã.

–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –∏–º—è)"""
            
        except Exception as e:
            logger.error(f"Error starting registration for {telegram_user_id}: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    async def process_registration_step(self, telegram_user_id: int, message_text: str, location_data: Optional[Dict] = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            current_step = self.get_registration_step(telegram_user_id)
            user = await self.get_user(telegram_user_id)
            
            if not user:
                return {'error': 'User not found', 'restart': True}
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            from user_registration import registration_manager
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
            result = registration_manager.process_registration_step(telegram_user_id, message_text, location_data)
            
            # –ï—Å–ª–∏ —à–∞–≥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if result.get('success'):
                await self._save_user_to_database(telegram_user_id, user)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                await log_user_activity(
                    telegram_user_id,
                    'registration_step',
                    {
                        'step': current_step.value,
                        'message': message_text[:100] if message_text else None,
                        'has_location': location_data is not None
                    }
                )
                
                # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                if result.get('completed'):
                    await self._finalize_registration(telegram_user_id, user)
            
            return result
            
        except Exception as e:
            logger.error(f"Error processing registration step for {telegram_user_id}: {e}")
            return {'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}', 'retry': True}
    
    async def _save_user_to_database(self, telegram_user_id: int, user: UserData):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            user_dict = user.to_dict()
            user_dict['telegram_username'] = user.metadata.get('telegram_username')
            user_dict['telegram_first_name'] = user.metadata.get('telegram_first_name')
            user_dict['telegram_last_name'] = user.metadata.get('telegram_last_name')
            
            await create_or_update_user(user_dict)
            logger.info(f"User {telegram_user_id} saved to database")
            
        except Exception as e:
            logger.error(f"Error saving user {telegram_user_id} to database: {e}")
            raise
    
    async def _finalize_registration(self, telegram_user_id: int, user: UserData):
        """–§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            user.metadata['registration_complete'] = True
            user.metadata['completed_at'] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await self._save_user_to_database(telegram_user_id, user)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await log_user_activity(
                telegram_user_id,
                'registration_complete',
                {'completed_at': user.metadata['completed_at']}
            )
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            self.registration_states[telegram_user_id] = RegistrationStep.COMPLETED
            
            logger.info(f"Registration completed for user {telegram_user_id}")
            
        except Exception as e:
            logger.error(f"Error finalizing registration for {telegram_user_id}: {e}")
            raise
    
    def _generate_registration_summary(self, user: UserData) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        from user_registration import registration_manager
        return registration_manager._generate_registration_summary(user)
    
    async def get_users_for_forecast(self, forecast_time: str) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        try:
            # –≠—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
            return []
        except Exception as e:
            logger.error(f"Error getting users for forecast at {forecast_time}: {e}")
            return []
    
    async def update_user_last_activity(self, telegram_user_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = await get_user_by_telegram_id(telegram_user_id)
            if user:
                from database import db_manager
                async with db_manager.get_session() as session:
                    user.last_active = datetime.utcnow()
                    await session.commit()
        except Exception as e:
            logger.error(f"Error updating last activity for {telegram_user_id}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_registration_manager = DatabaseRegistrationManager()
