"""
–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö - —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""
import logging
from datetime import datetime, date, timedelta
from typing import Dict, Optional, Any, List
from sqlalchemy import select, update, and_, func, desc
from sqlalchemy.ext.asyncio import AsyncSession
from database import (
    User, UserAction, UserAnalytics, ActionType, RegistrationStep,
    get_db_session, init_database
)

logger = logging.getLogger(__name__)

class DatabaseRegistrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ë–î"""
    
    def __init__(self):
        self._db_initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î"""
        if not self._db_initialized:
            success = await init_database()
            if success:
                self._db_initialized = True
                logger.info("Database registration manager initialized")
            return success
        return True
    
    async def get_user(self, telegram_user_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        async with await get_db_session() as session:
            stmt = select(User).where(User.telegram_user_id == telegram_user_id)
            result = await session.execute(stmt)
            return result.scalar_one_or_none()
    
    async def get_or_create_user(self, telegram_user_id: int, telegram_data: Dict[str, Any] = None) -> User:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = await self.get_user(telegram_user_id)
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_user_id=telegram_user_id,
                telegram_username=telegram_data.get('username') if telegram_data else None,
                telegram_first_name=telegram_data.get('first_name') if telegram_data else None,
                telegram_last_name=telegram_data.get('last_name') if telegram_data else None,
                first_seen=datetime.utcnow(),
                last_activity=datetime.utcnow(),
                registration_step=RegistrationStep.NOT_STARTED.value
            )
            
            async with await get_db_session() as session:
                session.add(user)
                await session.commit()
                await session.refresh(user)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            await self.log_user_action(
                telegram_user_id, 
                ActionType.REGISTRATION_STARTED.value,
                context={'telegram_data': telegram_data}
            )
            
            logger.info(f"Created new user: {telegram_user_id}")
        
        return user
    
    async def update_user_activity(self, telegram_user_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with await get_db_session() as session:
            stmt = (
                update(User)
                .where(User.telegram_user_id == telegram_user_id)
                .values(last_activity=datetime.utcnow())
            )
            await session.execute(stmt)
            await session.commit()
    
    async def get_registration_step(self, telegram_user_id: int) -> RegistrationStep:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user = await self.get_user(telegram_user_id)
        if not user:
            return RegistrationStep.NOT_STARTED
        
        try:
            return RegistrationStep(user.registration_step)
        except ValueError:
            return RegistrationStep.NOT_STARTED
    
    async def set_registration_step(self, telegram_user_id: int, step: RegistrationStep):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        async with await get_db_session() as session:
            stmt = (
                update(User)
                .where(User.telegram_user_id == telegram_user_id)
                .values(
                    registration_step=step.value,
                    last_activity=datetime.utcnow()
                )
            )
            await session.execute(stmt)
            await session.commit()
    
    async def is_registration_complete(self, telegram_user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
        user = await self.get_user(telegram_user_id)
        return user and user.registration_complete
    
    async def start_registration(self, telegram_user_id: int, telegram_data: Dict[str, Any]) -> str:
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user = await self.get_or_create_user(telegram_user_id, telegram_data)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è
        async with await get_db_session() as session:
            stmt = (
                update(User)
                .where(User.telegram_user_id == telegram_user_id)
                .values(
                    registration_step=RegistrationStep.NAME.value,
                    registration_complete=False,
                    last_activity=datetime.utcnow()
                )
            )
            await session.execute(stmt)
            await session.commit()
        
        return """üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DailyBot!

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –≤–∞—Å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

üìù –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã –∏ –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ –í–∞—à–µ –∏–º—è
‚Ä¢ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –í—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤

–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã.

–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –∏–º—è)"""
    
    async def process_registration_step(self, telegram_user_id: int, message_text: str, location_data: Optional[Dict] = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        current_step = await self.get_registration_step(telegram_user_id)
        user = await self.get_user(telegram_user_id)
        
        if not user:
            return {'error': 'User not found', 'restart': True}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await self.update_user_activity(telegram_user_id)
        
        try:
            if current_step == RegistrationStep.NAME:
                return await self._process_name(telegram_user_id, message_text)
            elif current_step == RegistrationStep.BIRTH_DATE:
                return await self._process_birth_date(telegram_user_id, message_text)
            elif current_step == RegistrationStep.BIRTH_TIME:
                return await self._process_birth_time(telegram_user_id, message_text)
            elif current_step == RegistrationStep.BIRTH_PLACE:
                return await self._process_birth_place(telegram_user_id, message_text)
            elif current_step == RegistrationStep.CURRENT_LOCATION:
                return await self._process_current_location(telegram_user_id, message_text, location_data)
            elif current_step == RegistrationStep.FORECAST_TIME:
                return await self._process_forecast_time(telegram_user_id, message_text)
            else:
                return {'error': 'Unknown registration step'}
                
        except Exception as e:
            logger.error(f"Error processing registration step {current_step} for user {telegram_user_id}: {e}")
            return {'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}', 'retry': True}
    
    async def _process_name(self, telegram_user_id: int, name: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏"""
        if not name or len(name.strip()) < 1:
            return {'error': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è', 'retry': True}
        
        async with await get_db_session() as session:
            stmt = (
                update(User)
                .where(User.telegram_user_id == telegram_user_id)
                .values(
                    name=name.strip(),
                    registration_step=RegistrationStep.BIRTH_DATE.value
                )
            )
            await session.execute(stmt)
            await session.commit()
        
        return {
            'success': True,
            'message': f"""–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä

üìÖ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì

–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"""
        }
    
    async def _process_birth_date(self, telegram_user_id: int, date_text: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            date_formats = ['%d.%m.%Y', '%d/%m/%Y', '%d-%m-%Y', '%Y-%m-%d']
            birth_date = None
            
            for date_format in date_formats:
                try:
                    birth_date = datetime.strptime(date_text.strip(), date_format)
                    break
                except ValueError:
                    continue
            
            if not birth_date:
                return {
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)',
                    'retry': True
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            if birth_date.year < 1900 or birth_date > datetime.now():
                return {
                    'error': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è',
                    'retry': True
                }
            
            async with await get_db_session() as session:
                stmt = (
                    update(User)
                    .where(User.telegram_user_id == telegram_user_id)
                    .values(
                        birth_date=birth_date,
                        registration_step=RegistrationStep.BIRTH_TIME.value
                    )
                )
                await session.execute(stmt)
                await session.commit()
            
            return {
                'success': True,
                'message': f"""–û—Ç–ª–∏—á–Ω–æ! –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d.%m.%Y')}

‚è∞ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú

–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30

–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ –∑–Ω–∞—é" - –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–¥–µ–Ω—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤."""
            }
            
        except Exception as e:
            return {
                'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì',
                'retry': True
            }
    
    async def _process_birth_time(self, telegram_user_id: int, time_text: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""
        time_text = time_text.strip().lower()
        
        if time_text in ['–Ω–µ –∑–Ω–∞—é', '–Ω–µ–∑–Ω–∞—é', '–Ω–µ—Ç', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']:
            birth_time = '12:00'
            birth_time_unknown = True
            time_display = '12:00 (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)'
        else:
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
                time_formats = ['%H:%M', '%H.%M', '%H-%M']
                parsed_time = None
                
                for time_format in time_formats:
                    try:
                        parsed_time = datetime.strptime(time_text, time_format)
                        break
                    except ValueError:
                        continue
                
                if not parsed_time:
                    return {
                        'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ –∑–Ω–∞—é"',
                        'retry': True
                    }
                
                birth_time = parsed_time.strftime('%H:%M')
                birth_time_unknown = False
                time_display = birth_time
                
            except Exception:
                return {
                    'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ –∑–Ω–∞—é"',
                    'retry': True
                }
        
        async with await get_db_session() as session:
            stmt = (
                update(User)
                .where(User.telegram_user_id == telegram_user_id)
                .values(
                    birth_time=birth_time,
                    birth_time_unknown=birth_time_unknown,
                    registration_step=RegistrationStep.BIRTH_PLACE.value
                )
            )
            await session.execute(stmt)
            await session.commit()
        
        return {
            'success': True,
            'message': f"""–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {time_display}

üèôÔ∏è –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è

–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥

–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã."""
        }
    
    async def _process_birth_place(self, telegram_user_id: int, place_text: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not place_text or len(place_text.strip()) < 2:
            return {'error': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è', 'retry': True}
        
        async with await get_db_session() as session:
            stmt = (
                update(User)
                .where(User.telegram_user_id == telegram_user_id)
                .values(
                    birth_place=place_text.strip(),
                    registration_step=RegistrationStep.CURRENT_LOCATION.value
                )
            )
            await session.execute(stmt)
            await session.commit()
        
        return {
            'success': True,
            'message': f"""–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {place_text}

üìç –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≥–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ —Å–µ–π—á–∞—Å:

üåç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
üèôÔ∏è –ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞

–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.""",
            'request_location': True
        }
    
    async def _process_current_location(self, telegram_user_id: int, message_text: str, location_data: Optional[Dict] = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
        if location_data:
            # –ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
            coordinates = {"lat": location_data['latitude'], "lon": location_data['longitude']}
            
            async with await get_db_session() as session:
                stmt = (
                    update(User)
                    .where(User.telegram_user_id == telegram_user_id)
                    .values(
                        current_coordinates=coordinates,
                        location_type='coordinates',
                        registration_step=RegistrationStep.FORECAST_TIME.value
                    )
                )
                await session.execute(stmt)
                await session.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            await self.log_user_action(
                telegram_user_id,
                ActionType.LOCATION_SHARED.value,
                context={'coordinates': coordinates}
            )
            
            location_display = f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location_data['latitude']:.4f}, {location_data['longitude']:.4f}"
        else:
            # –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞
            if not message_text or len(message_text.strip()) < 2:
                return {'error': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π', 'retry': True}
            
            async with await get_db_session() as session:
                stmt = (
                    update(User)
                    .where(User.telegram_user_id == telegram_user_id)
                    .values(
                        current_location=message_text.strip(),
                        location_type='city',
                        registration_step=RegistrationStep.FORECAST_TIME.value
                    )
                )
                await session.execute(stmt)
                await session.commit()
            
            location_display = f"üèôÔ∏è –ì–æ—Ä–æ–¥: {message_text}"
        
        return {
            'success': True,
            'message': f"""–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location_display}

‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å! –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑—ã?

–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
–ù–∞–ø—Ä–∏–º–µ—Ä: 09:00, 19:30

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è (8:00-10:00) –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è."""
        }
    
    async def _process_forecast_time(self, telegram_user_id: int, time_text: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        try:
            time_formats = ['%H:%M', '%H.%M', '%H-%M']
            forecast_time = None
            
            for time_format in time_formats:
                try:
                    forecast_time = datetime.strptime(time_text.strip(), time_format)
                    break
                except ValueError:
                    continue
            
            if not forecast_time:
                return {
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00)',
                    'retry': True
                }
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            async with await get_db_session() as session:
                stmt = (
                    update(User)
                    .where(User.telegram_user_id == telegram_user_id)
                    .values(
                        forecast_time=forecast_time.strftime('%H:%M'),
                        frequency='daily',
                        language='ru',
                        astro_level='beginner',
                        registration_complete=True,
                        registered_at=datetime.utcnow(),
                        registration_step=RegistrationStep.COMPLETED.value
                    )
                )
                await session.execute(stmt)
                await session.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await self.log_user_action(
                telegram_user_id,
                ActionType.REGISTRATION_COMPLETED.value,
                context={'forecast_time': forecast_time.strftime('%H:%M')}
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–≤–æ–¥–∫–∏
            user = await self.get_user(telegram_user_id)
            summary = await self._generate_registration_summary(user)
            
            return {
                'success': True,
                'completed': True,
                'message': f"""üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

{summary}

‚ú® –°–µ–π—á–∞—Å —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –≤–∞—à –ø–µ—Ä–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/astro - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
/help - –°–ø—Ä–∞–≤–∫–∞"""
            }
            
        except Exception as e:
            return {
                'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú',
                'retry': True
            }
    
    async def _generate_registration_summary(self, user: User) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        name = user.name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if user.birth_date:
            birth_date_formatted = user.birth_date.strftime('%d.%m.%Y')
        else:
            birth_date_formatted = '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
        
        time_note = ""
        if user.birth_time_unknown:
            time_note = " (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)"
        
        location_info = ""
        if user.location_type == 'coordinates' and user.current_coordinates:
            location_info = "üìç –ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"
        elif user.current_location:
            location_info = f"üèôÔ∏è {user.current_location}"
        
        return f"""üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
üë§ –ò–º—è: {name}
üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date_formatted}
‚è∞ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birth_time or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}{time_note}
üèôÔ∏è –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birth_place or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üìç –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location_info}
üîî –í—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {user.forecast_time or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"""
    
    async def log_user_action(self, telegram_user_id: int, action_type: str, command: str = None, message_text: str = None, context: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            action = UserAction(
                user_id=(await self.get_user(telegram_user_id)).id,
                action_type=action_type,
                command=command,
                message_text=message_text,
                context=context or {},
                created_at=datetime.utcnow()
            )
            
            async with await get_db_session() as session:
                session.add(action)
                await session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            await self._update_daily_analytics(telegram_user_id, action_type, command)
            
        except Exception as e:
            logger.error(f"Error logging user action for {telegram_user_id}: {e}")
    
    async def _update_daily_analytics(self, telegram_user_id: int, action_type: str, command: str = None):
        """–û–±–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = await self.get_user(telegram_user_id)
            if not user:
                return
            
            today = date.today()
            
            async with await get_db_session() as session:
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                stmt = select(UserAnalytics).where(
                    and_(
                        UserAnalytics.user_id == user.id,
                        func.date(UserAnalytics.date) == today
                    )
                )
                result = await session.execute(stmt)
                analytics = result.scalar_one_or_none()
                
                if not analytics:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    analytics = UserAnalytics(
                        user_id=user.id,
                        date=datetime.combine(today, datetime.min.time()),
                        first_activity_time=datetime.utcnow(),
                        commands_used=[]
                    )
                    session.add(analytics)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                analytics.last_activity_time = datetime.utcnow()
                
                if action_type == ActionType.MESSAGE_SENT.value:
                    analytics.total_messages += 1
                elif action_type == ActionType.COMMAND_USED.value:
                    analytics.total_commands += 1
                    if command and command not in analytics.commands_used:
                        analytics.commands_used.append(command)
                elif action_type == ActionType.ASTRO_REQUEST.value:
                    analytics.astro_requests += 1
                elif action_type == ActionType.MOON_REQUEST.value:
                    analytics.moon_requests += 1
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
                if analytics.first_activity_time and analytics.last_activity_time:
                    duration = analytics.last_activity_time - analytics.first_activity_time
                    analytics.session_duration_minutes = int(duration.total_seconds() / 60)
                
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
                analytics.engagement_score = (
                    analytics.total_messages * 1.0 +
                    analytics.total_commands * 2.0 +
                    analytics.astro_requests * 3.0 +
                    analytics.moon_requests * 2.5
                )
                
                await session.commit()
                
        except Exception as e:
            logger.error(f"Error updating daily analytics for {telegram_user_id}: {e}")
    
    async def get_user_analytics(self, telegram_user_id: int, days: int = 30) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏"""
        try:
            user = await self.get_user(telegram_user_id)
            if not user:
                return {}
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
            start_date = datetime.now() - timedelta(days=days)
            
            async with await get_db_session() as session:
                stmt = (
                    select(UserAnalytics)
                    .where(
                        and_(
                            UserAnalytics.user_id == user.id,
                            UserAnalytics.date >= start_date
                        )
                    )
                    .order_by(desc(UserAnalytics.date))
                )
                result = await session.execute(stmt)
                analytics_records = result.scalars().all()
                
                # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_messages = sum(a.total_messages for a in analytics_records)
                total_commands = sum(a.total_commands for a in analytics_records)
                total_astro_requests = sum(a.astro_requests for a in analytics_records)
                total_moon_requests = sum(a.moon_requests for a in analytics_records)
                avg_engagement = sum(a.engagement_score for a in analytics_records) / len(analytics_records) if analytics_records else 0
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏
                active_days = len(analytics_records)
                
                # –°–∞–º—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã
                all_commands = []
                for a in analytics_records:
                    all_commands.extend(a.commands_used or [])
                
                command_counts = {}
                for cmd in all_commands:
                    command_counts[cmd] = command_counts.get(cmd, 0) + 1
                
                most_used_commands = sorted(command_counts.items(), key=lambda x: x[1], reverse=True)[:5]
                
                return {
                    'user_info': {
                        'name': user.name,
                        'telegram_user_id': user.telegram_user_id,
                        'registered_at': user.registered_at.isoformat() if user.registered_at else None,
                        'first_seen': user.first_seen.isoformat() if user.first_seen else None,
                        'last_activity': user.last_activity.isoformat() if user.last_activity else None,
                        'registration_complete': user.registration_complete
                    },
                    'analytics_period': {
                        'days': days,
                        'active_days': active_days
                    },
                    'totals': {
                        'messages': total_messages,
                        'commands': total_commands,
                        'astro_requests': total_astro_requests,
                        'moon_requests': total_moon_requests,
                        'avg_engagement_score': round(avg_engagement, 2)
                    },
                    'most_used_commands': most_used_commands,
                    'daily_records': [
                        {
                            'date': a.date.date().isoformat(),
                            'messages': a.total_messages,
                            'commands': a.total_commands,
                            'astro_requests': a.astro_requests,
                            'moon_requests': a.moon_requests,
                            'engagement_score': a.engagement_score,
                            'session_duration_minutes': a.session_duration_minutes
                        } for a in analytics_records
                    ]
                }
                
        except Exception as e:
            logger.error(f"Error getting user analytics for {telegram_user_id}: {e}")
            return {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ë–î
db_registration_manager = DatabaseRegistrationManager()
