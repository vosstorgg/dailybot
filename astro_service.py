"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ WeatherAPI
"""
import os
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Optional, Any
from aiohttp import ClientSession

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')
WEATHER_API_BASE = 'http://api.weatherapi.com/v1'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –∞—Å—Ç—Ä–æ-–¥–∞–Ω–Ω—ã—Ö
_astro_cache: Dict[str, Dict[str, Any]] = {}

class AstroDataCache:
    """–ü—Ä–æ—Å—Ç–æ–π in-memory –∫—ç—à –¥–ª—è –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.cache = {}
    
    def get(self, key: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
        if key in self.cache:
            data, timestamp = self.cache[key]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ (24 —á–∞—Å–∞ –¥–ª—è –∞—Å—Ç—Ä–æ-–¥–∞–Ω–Ω—ã—Ö)
            if datetime.now() - timestamp < timedelta(hours=24):
                logger.info(f"Cache HIT for {key}")
                return data
            else:
                logger.info(f"Cache EXPIRED for {key}")
                del self.cache[key]
        return None
    
    def set(self, key: str, data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        self.cache[key] = (data, datetime.now())
        logger.info(f"Cache SET for {key}")
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"""
        self.cache.clear()
        logger.info("Cache CLEARED")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
astro_cache = AstroDataCache()

async def get_moon_phase_data() -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–∑–µ –õ—É–Ω—ã (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ, –Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è)
    –ö—ç—à–∏—Ä—É—é—Ç—Å—è –Ω–∞ 24 —á–∞—Å–∞
    """
    cache_key = f"moon_phase_{datetime.now().strftime('%Y-%m-%d')}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_data = astro_cache.get(cache_key)
    if cached_data:
        return cached_data
    
    if not WEATHER_API_KEY:
        logger.error("WEATHER_API_KEY not configured")
        return None
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –õ–æ–Ω–¥–æ–Ω –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—É—é —Ç–æ—á–∫—É –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    url = f"{WEATHER_API_BASE}/astronomy.json"
    params = {
        'key': WEATHER_API_KEY,
        'q': 'London',  # –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–∞—è —Ç–æ—á–∫–∞
        'dt': datetime.now().strftime('%Y-%m-%d')
    }
    
    try:
        async with ClientSession() as session:
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    astro_data = {
                        'moon_phase': data['astronomy']['astro']['moon_phase'],
                        'moon_illumination': int(data['astronomy']['astro']['moon_illumination']),
                        'date': datetime.now().strftime('%Y-%m-%d'),
                        'source': 'weatherapi.com'
                    }
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                    astro_cache.set(cache_key, astro_data)
                    
                    logger.info(f"Fetched moon phase data: {astro_data['moon_phase']} ({astro_data['moon_illumination']}%)")
                    return astro_data
                else:
                    logger.error(f"WeatherAPI error: {response.status}")
                    return None
                    
    except Exception as e:
        logger.error(f"Error fetching moon phase data: {e}")
        return None

async def get_daily_astro_summary() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É –¥–Ω—è
    """
    logger.info("Generating daily astro summary...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –õ—É–Ω–µ
    moon_data = await get_moon_phase_data()
    
    if not moon_data:
        return {
            'status': 'error',
            'message': 'Unable to fetch astronomical data'
        }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    summary = {
        'date': datetime.now().strftime('%Y-%m-%d'),
        'moon': {
            'phase': moon_data['moon_phase'],
            'illumination': moon_data['moon_illumination'],
            'description': _get_moon_description(moon_data)
        },
        'general_energy': _get_general_energy_description(moon_data),
        'recommendations': _get_daily_recommendations(moon_data),
        'cached': True if astro_cache.get(f"moon_phase_{datetime.now().strftime('%Y-%m-%d')}") else False
    }
    
    logger.info(f"Generated astro summary for {summary['date']}")
    return summary

def _get_moon_description(moon_data: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ª—É–Ω–Ω–æ–π —Ñ–∞–∑—ã"""
    phase = moon_data['moon_phase']
    illumination = moon_data['moon_illumination']
    
    descriptions = {
        'New Moon': f'üåë –ù–æ–≤–æ–ª—É–Ω–∏–µ ({illumination}%) - –≤—Ä–µ–º—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
        'Waxing Crescent': f'üåí –†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞ ({illumination}%) - –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è',
        'First Quarter': f'üåì –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å ({illumination}%) - –≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –∏ –¥–µ–π—Å—Ç–≤–∏–π',
        'Waxing Gibbous': f'üåî –†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞ ({illumination}%) - –ø–µ—Ä–∏–æ–¥ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏',
        'Full Moon': f'üåï –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ ({illumination}%) - –ø–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —ç–º–æ—Ü–∏–π',
        'Waning Gibbous': f'üåñ –£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞ ({illumination}%) - –≤—Ä–µ–º—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–¥–∞—á–∏',
        'Last Quarter': f'üåó –ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å ({illumination}%) - –ø–µ—Ä–∏–æ–¥ –æ—á–∏—â–µ–Ω–∏—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è',
        'Waning Crescent': f'üåò –£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞ ({illumination}%) - –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏'
    }
    
    return descriptions.get(phase, f'üåô {phase} ({illumination}%)')

def _get_general_energy_description(moon_data: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—â–µ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –¥–Ω—è"""
    phase = moon_data['moon_phase']
    illumination = moon_data['moon_illumination']
    
    if 'New Moon' in phase:
        return "–≠–Ω–µ—Ä–≥–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å–≤–µ–∂–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
    elif 'Waxing' in phase and illumination < 50:
        return "–†–∞—Å—Ç—É—â–∞—è —ç–Ω–µ—Ä–≥–∏—è —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –Ω–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º –∏ –∞–∫—Ç–∏–≤–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º."
    elif 'Full Moon' in phase or illumination > 90:
        return "–ü–∏–∫–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è! –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–ª –∏ —è—Ä–∫–∏—Ö —ç–º–æ—Ü–∏–π. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ —á—É–≤—Å—Ç–≤–∞–º."
    elif 'Waning' in phase:
        return "–£–±—ã–≤–∞—é—â–∞—è —ç–Ω–µ—Ä–≥–∏—è –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç–ø—É—Å—Ç–∏—Ç—å –ª–∏—à–Ω–µ–µ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –≤–∞–∂–Ω–æ–º."
    else:
        return "–°—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è. –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–µ–ª –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π."

def _get_daily_recommendations(moon_data: Dict[str, Any]) -> list:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –¥–µ–Ω—å"""
    phase = moon_data['moon_phase']
    illumination = moon_data['moon_illumination']
    
    if 'New Moon' in phase:
        return [
            "üéØ –ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ü–µ–ª–∏",
            "üßò –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –º–µ–¥–∏—Ç–∞—Ü–∏—é",
            "üìù –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ –∂–µ–ª–∞–Ω–∏–π"
        ]
    elif 'Waxing' in phase:
        return [
            "üöÄ –ù–∞—á–∏–Ω–∞–π—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã",
            "üí™ –ê–∫—Ç–∏–≤–Ω–æ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ",
            "üå± –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏"
        ]
    elif 'Full Moon' in phase:
        return [
            "‚ú® –ó–∞–≤–µ—Ä—à–∞–π—Ç–µ –Ω–∞—á–∞—Ç—ã–µ –¥–µ–ª–∞",
            "‚ù§Ô∏è –ü—Ä–æ—è–≤–ª—è–π—Ç–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å",
            "üåä –°–ª–µ–¥–∏—Ç–µ –∑–∞ —ç–º–æ—Ü–∏—è–º–∏"
        ]
    else:  # Waning
        return [
            "üßπ –ò–∑–±–∞–≤—å—Ç–µ—Å—å –æ—Ç –ª–∏—à–Ω–µ–≥–æ",
            "ü§ù –ü–æ–º–æ–≥–∞–π—Ç–µ –¥—Ä—É–≥–∏–º",
            "üò¥ –ë–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞–π—Ç–µ"
        ]

async def test_weather_api_connection() -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WeatherAPI"""
    if not WEATHER_API_KEY:
        return {
            'status': 'error',
            'message': 'WEATHER_API_KEY not configured'
        }
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        url = f"{WEATHER_API_BASE}/current.json"
        params = {
            'key': WEATHER_API_KEY,
            'q': 'London'
        }
        
        async with ClientSession() as session:
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    return {
                        'status': 'success',
                        'message': 'WeatherAPI connection successful'
                    }
                else:
                    return {
                        'status': 'error',
                        'message': f'WeatherAPI returned status {response.status}'
                    }
                    
    except Exception as e:
        return {
            'status': 'error',
            'message': f'Connection error: {str(e)}'
        }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
def clear_cache():
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    astro_cache.clear()
