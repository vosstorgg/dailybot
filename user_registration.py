"""
–°–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞
"""
import logging
from datetime import datetime
from typing import Dict, Optional, Any
from enum import Enum

logger = logging.getLogger(__name__)

class RegistrationStep(Enum):
    """–≠—Ç–∞–ø—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    NOT_STARTED = "not_started"
    NAME = "name"
    BIRTH_DATE = "birth_date"
    BIRTH_TIME = "birth_time"
    BIRTH_PLACE = "birth_place"
    CURRENT_LOCATION = "current_location"
    FORECAST_TIME = "forecast_time"
    COMPLETED = "completed"

class UserData:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.personal = {}
        self.current = {}
        self.preferences = {}
        self.metadata = {
            'registered_at': datetime.now().isoformat(),
            'registration_step': RegistrationStep.NOT_STARTED.value,
            'registration_complete': False
        }
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return {
            'user_id': self.user_id,
            'personal': self.personal,
            'current': self.current,
            'preferences': self.preferences,
            'metadata': self.metadata
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'UserData':
        """–°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        user = cls(data['user_id'])
        user.personal = data.get('personal', {})
        user.current = data.get('current', {})
        user.preferences = data.get('preferences', {})
        user.metadata = data.get('metadata', {})
        return user

class RegistrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–≤ –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ –ë–î)
        self.users: Dict[int, UserData] = {}
        self.registration_states: Dict[int, RegistrationStep] = {}
    
    def get_user(self, user_id: int) -> Optional[UserData]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.users.get(user_id)
    
    def get_or_create_user(self, user_id: int) -> UserData:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.users:
            self.users[user_id] = UserData(user_id)
            self.registration_states[user_id] = RegistrationStep.NOT_STARTED
        return self.users[user_id]
    
    def get_registration_step(self, user_id: int) -> RegistrationStep:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        return self.registration_states.get(user_id, RegistrationStep.NOT_STARTED)
    
    def set_registration_step(self, user_id: int, step: RegistrationStep):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.registration_states[user_id] = step
        if user_id in self.users:
            self.users[user_id].metadata['registration_step'] = step.value
    
    def is_registration_complete(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
        return self.get_registration_step(user_id) == RegistrationStep.COMPLETED
    
    def start_registration(self, user_id: int, user_telegram_data: Dict[str, Any]) -> str:
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user = self.get_or_create_user(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
        user.metadata.update({
            'telegram_username': user_telegram_data.get('username'),
            'telegram_first_name': user_telegram_data.get('first_name'),
            'telegram_last_name': user_telegram_data.get('last_name')
        })
        
        self.set_registration_step(user_id, RegistrationStep.NAME)
        
        return """üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DailyBot!

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –≤–∞—Å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

üìù –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã –∏ –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ –í–∞—à–µ –∏–º—è
‚Ä¢ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –í—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤

–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã.

–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –∏–º—è)"""
    
    def process_registration_step(self, user_id: int, message_text: str, location_data: Optional[Dict] = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        current_step = self.get_registration_step(user_id)
        user = self.get_user(user_id)
        
        if not user:
            return {'error': 'User not found', 'restart': True}
        
        try:
            if current_step == RegistrationStep.NAME:
                return self._process_name(user_id, user, message_text)
            elif current_step == RegistrationStep.BIRTH_DATE:
                return self._process_birth_date(user_id, user, message_text)
            elif current_step == RegistrationStep.BIRTH_TIME:
                return self._process_birth_time(user_id, user, message_text)
            elif current_step == RegistrationStep.BIRTH_PLACE:
                return self._process_birth_place(user_id, user, message_text)
            elif current_step == RegistrationStep.CURRENT_LOCATION:
                return self._process_current_location(user_id, user, message_text, location_data)
            elif current_step == RegistrationStep.FORECAST_TIME:
                return self._process_forecast_time(user_id, user, message_text)
            else:
                return {'error': 'Unknown registration step'}
                
        except Exception as e:
            logger.error(f"Error processing registration step {current_step} for user {user_id}: {e}")
            return {'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}', 'retry': True}
    
    def _process_name(self, user_id: int, user: UserData, name: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏"""
        if not name or len(name.strip()) < 1:
            return {'error': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è', 'retry': True}
        
        user.personal['name'] = name.strip()
        self.set_registration_step(user_id, RegistrationStep.BIRTH_DATE)
        
        return {
            'success': True,
            'message': f"""–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä

üìÖ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì

–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"""
        }
    
    def _process_birth_date(self, user_id: int, user: UserData, date_text: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            date_formats = ['%d.%m.%Y', '%d/%m/%Y', '%d-%m-%Y', '%Y-%m-%d']
            birth_date = None
            
            for date_format in date_formats:
                try:
                    birth_date = datetime.strptime(date_text.strip(), date_format)
                    break
                except ValueError:
                    continue
            
            if not birth_date:
                return {
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)',
                    'retry': True
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            if birth_date.year < 1900 or birth_date > datetime.now():
                return {
                    'error': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è',
                    'retry': True
                }
            
            user.personal['birth_date'] = birth_date.strftime('%Y-%m-%d')
            self.set_registration_step(user_id, RegistrationStep.BIRTH_TIME)
            
            return {
                'success': True,
                'message': f"""–û—Ç–ª–∏—á–Ω–æ! –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d.%m.%Y')}

‚è∞ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú

–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30

–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ –∑–Ω–∞—é" - –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–¥–µ–Ω—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤."""
            }
            
        except Exception as e:
            return {
                'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì',
                'retry': True
            }
    
    def _process_birth_time(self, user_id: int, user: UserData, time_text: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""
        time_text = time_text.strip().lower()
        
        if time_text in ['–Ω–µ –∑–Ω–∞—é', '–Ω–µ–∑–Ω–∞—é', '–Ω–µ—Ç', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']:
            user.personal['birth_time'] = '12:00'
            user.personal['birth_time_unknown'] = True
            time_display = '12:00 (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)'
        else:
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
                time_formats = ['%H:%M', '%H.%M', '%H-%M']
                birth_time = None
                
                for time_format in time_formats:
                    try:
                        birth_time = datetime.strptime(time_text, time_format)
                        break
                    except ValueError:
                        continue
                
                if not birth_time:
                    return {
                        'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ –∑–Ω–∞—é"',
                        'retry': True
                    }
                
                user.personal['birth_time'] = birth_time.strftime('%H:%M')
                user.personal['birth_time_unknown'] = False
                time_display = birth_time.strftime('%H:%M')
                
            except Exception:
                return {
                    'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ –∑–Ω–∞—é"',
                    'retry': True
                }
        
        self.set_registration_step(user_id, RegistrationStep.BIRTH_PLACE)
        
        return {
            'success': True,
            'message': f"""–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {time_display}

üèôÔ∏è –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è

–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥

–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã."""
        }
    
    def _process_birth_place(self, user_id: int, user: UserData, place_text: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not place_text or len(place_text.strip()) < 2:
            return {'error': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è', 'retry': True}
        
        user.personal['birth_place'] = place_text.strip()
        self.set_registration_step(user_id, RegistrationStep.CURRENT_LOCATION)
        
        return {
            'success': True,
            'message': f"""–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {place_text}

üìç –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≥–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ —Å–µ–π—á–∞—Å:

üåç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
üèôÔ∏è –ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞

–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.""",
            'request_location': True
        }
    
    def _process_current_location(self, user_id: int, user: UserData, message_text: str, location_data: Optional[Dict] = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
        if location_data:
            # –ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
            user.current['coordinates'] = [location_data['latitude'], location_data['longitude']]
            user.current['location_type'] = 'coordinates'
            location_display = f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location_data['latitude']:.4f}, {location_data['longitude']:.4f}"
        else:
            # –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞
            if not message_text or len(message_text.strip()) < 2:
                return {'error': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π', 'retry': True}
            
            user.current['location'] = message_text.strip()
            user.current['location_type'] = 'city'
            location_display = f"üèôÔ∏è –ì–æ—Ä–æ–¥: {message_text}"
        
        self.set_registration_step(user_id, RegistrationStep.FORECAST_TIME)
        
        return {
            'success': True,
            'message': f"""–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location_display}

‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å! –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑—ã?

–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
–ù–∞–ø—Ä–∏–º–µ—Ä: 09:00, 19:30

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è (8:00-10:00) –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è."""
        }
    
    def _process_forecast_time(self, user_id: int, user: UserData, time_text: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        try:
            time_formats = ['%H:%M', '%H.%M', '%H-%M']
            forecast_time = None
            
            for time_format in time_formats:
                try:
                    forecast_time = datetime.strptime(time_text.strip(), time_format)
                    break
                except ValueError:
                    continue
            
            if not forecast_time:
                return {
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00)',
                    'retry': True
                }
            
            user.preferences['forecast_time'] = forecast_time.strftime('%H:%M')
            user.preferences['frequency'] = 'daily'
            user.preferences['language'] = 'ru'
            user.preferences['astro_level'] = 'beginner'
            
            user.metadata['registration_complete'] = True
            user.metadata['completed_at'] = datetime.now().isoformat()
            
            self.set_registration_step(user_id, RegistrationStep.COMPLETED)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            summary = self._generate_registration_summary(user)
            
            return {
                'success': True,
                'completed': True,
                'message': f"""üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

{summary}

‚ú® –°–µ–π—á–∞—Å —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –≤–∞—à –ø–µ—Ä–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/astro - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
/help - –°–ø—Ä–∞–≤–∫–∞"""
            }
            
        except Exception as e:
            return {
                'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú',
                'retry': True
            }
    
    def _generate_registration_summary(self, user: UserData) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        name = user.personal.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        birth_date = user.personal.get('birth_date', '')
        birth_time = user.personal.get('birth_time', '')
        birth_place = user.personal.get('birth_place', '')
        forecast_time = user.preferences.get('forecast_time', '')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if birth_date:
            try:
                date_obj = datetime.strptime(birth_date, '%Y-%m-%d')
                birth_date_formatted = date_obj.strftime('%d.%m.%Y')
            except:
                birth_date_formatted = birth_date
        else:
            birth_date_formatted = '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
        
        time_note = ""
        if user.personal.get('birth_time_unknown'):
            time_note = " (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)"
        
        location_info = ""
        if user.current.get('location_type') == 'coordinates':
            location_info = "üìç –ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"
        elif user.current.get('location'):
            location_info = f"üèôÔ∏è {user.current['location']}"
        
        return f"""üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
üë§ –ò–º—è: {name}
üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date_formatted}
‚è∞ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_time}{time_note}
üèôÔ∏è –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_place}
üìç –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location_info}
üîî –í—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {forecast_time}"""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registration_manager = RegistrationManager()
